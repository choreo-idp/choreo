# This is the default values.yaml file for the Choreo platform Helm chart.
# The values.yaml is generated by the helmify and append content of this file to the generated values.yaml
# Therefore, all the manual changes to the values.yaml should do here.
choreoDefaultValues:
  enableDefaultOrgAndProject: true
  organization:
    enabled: true
    name: default-org
    displayName: Default Organization
    description: Getting started with your first organization
  dataPlane:
    name: default-dataplane
    namespace: default-org
    organization: default-org
    displayName: Default Data Plane
    description: Local development data plane
    kubernetesCluster:
      name: kind-cluster-1
      connectionConfigRef: kind-cluster-1-connection-config
      featureFlags:
        cilium: true
        scaleToZero: true
        gatewayType: envoy
    externalGatewayVirtualHost: choreoapis.localhost
    internalGatewayVirtualHost: choreoapis.internal
  Environments:
    - name: development
      displayName: Development
      description: Development environment for testing
      namespace: default-org
      organization: default-org
      dnsPrefix: dev
      isCritical: false
    - name: staging
      displayName: Staging
      description: Staging environment for pre-production testing
      namespace: default-org
      organization: default-org
      dnsPrefix: staging
      isCritical: false
    - name: production
      displayName: Production
      description: Production environment
      namespace: default-org
      organization: default-org
      dnsPrefix: prod
      isCritical: true
  deploymentPipeline:
    name: default-pipeline
    namespace: default-org
    organization: default-org
    displayName: Default Pipeline
    description: Standard deployment pipeline with dev, staging, and prod environments
    promotionOrder:
      - sourceEnvironmentRef: development
        targetEnvironmentRefs:
          - name: staging
            requiresApproval: false
          - name: production
            isManualApprovalRequired: true
      - sourceEnvironmentRef: staging
        targetEnvironmentRefs:
            - name: production
              requiresApproval: true
  DefaultProject:
    name: default-project
    namespace: default-org
    organization: default-org
    displayName: Default Project
    description: Your first project to get started
waitJob:
  image: bitnami/kubectl:latest
metricsServer:
  enabled: false
  kubeletInsecureTlsEnabled: true
# customizing the vault configurations
vault:
  server:
    # -- Resource limits and requests for the vault server
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
    dev:
      enabled: true
      devRootToken: "root"
      logLevel: "info"
    # Add readiness probe configuration
    readinessProbe:
      exec:
        command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
      initialDelaySeconds: 5
      timeoutSeconds: 10  # Increase from default
      periodSeconds: 10
      failureThreshold: 3
  injector:
    enabled: false
    # -- Resource limits and requests for the vault injector
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
# customizing the secrets-store-csi-driver configurations
secrets-store-csi-driver:
  syncSecret:
    enabled: true
  enableSecretRotation: true
  vaultCsiProvider:
    enabled: true
# customizing the argo workflows configurations
argo-workflows:
  controller:
    # -- Resource limits and requests for the argo workflows controller
    resources:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 32Mi
        cpu: 25m
  server:
    # -- Resource limits and requests for the argo workflows server
    resources:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 32Mi
        cpu: 25m
  crds:
    keep: false
  workflow:
    serviceAccount:
      create: true
  workflowNamespaces:
    - argo-build
# customizing the registry configurations
registry:
  # -- Resource limits and requests for the registry
  resources:
    limits:
      memory: 256Mi
      cpu: 100m
    requests:
      memory: 128Mi
      cpu: 50m
  service:
    # -- NodePort for the registry service
    nodePort: 30003
  # -- Persistent volume storage for the registry
  storage:
    size: 2Gi
# customizing the envoy gateway configurations
gateway-helm:
  config:
    envoyGateway:
      rateLimit:
        backend:
          type: Redis
          redis:
            url: redis.choreo-system.svc.cluster.local:6379
  # -- Resource limits and requests for the gateway
  deployment:
    envoyGateway:
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
# customizing the cert-manager configurations
certmanager:
  enabled: true
  crds:
    enabled: true
  # -- Resource limits and requests for the cert-manager controller
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 50m
      memory: 64Mi
  cainjector:
    # -- Resource limits and requests for the cert-manager cainjector
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
  webhook:
    # -- Resource limits and requests for the cert-manager webhook
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
